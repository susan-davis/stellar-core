%% dgdebug -q maneuver-tests.dg maneuvering.dg sectored-grid.dg \
%%            testrunner.dg stdlib.dg

(list of tests [
	#turn-ship
	#turn-ship-to-starboard
	#turn-ship-to-port
	#turn-ship-about
	#turn-ship-to-starboard-too-hard
	#turn-ship-to-port-too-hard
	#accelerate
	#accelerate-too-fast
	#accelerate-way-too-fast
	#decelerate
	#energy-for-warp-4
	#energy-for-warp-8
	#move-on-course
	#move-on-course-closest-target
	#move-on-course-distant-target
	#adjust-throttle-932
	#adjust-throttle-6
	#adjust-throttle-1
	#adjust-throttle-0
	#update-ship-near-target
	#update-ship-far-target
	#update-ship-distant-target
	#move-1-at-7
	#move-2-at-7
	#move-5-at-7
	#move-10-at-4
	#move-1-toward-corner
	#move-2-toward-corner
	#move-5-toward-corner
	])

%% ----------------------------------------------------------------------

#test-ship
(ship *)
(* initial state is
 [344 454 315 400 304 414 #cygnus-class 932 4 500 [100 100 100 100] 10 90 700])

#cygnus-class
(name *)	Cygnus
(type *)	scout ship
(* state is
 [0 0 180 300 500 2963 #cygnus-class 1000 4 500 [100 100 100 100] 10])

#sun
(grid object *)
(* state is [578 578])

#planet
(grid object *)
(* state is [575 576])

#other-planet
(grid object *)
(* state is [577 572])

#closest-target
(ship *)
(* initial state is
     [355 445 225 200 0 0 #attack-class 500 2 250 [100 50 50 50] 0 225 200])
     
#attack-class
(name *)	Attack
(type *)	attack ship
(* state is
 [0 0 90 100 200 751 #attack-class 500 2 250 [100 50 50 50] 0])

#near-target
(ship *)
(* initial state is
     [314 424 45 300 0 0 #attack-class 500 2 250 [100 50 50 50] 0 45 310])

#far-target
(ship *)
(* initial state is
     [424 314 225 500 0 0 #attack-class 500 2 250 [100 50 50 50] 0 225 410])

#distant-target
(ship *)
(* initial state is
     [154 984 135 600 0 0 #attack-class 500 2 250 [100 50 50 50] 0 135 525])

%% ----------------------------------------------------------------------

(reset $Ship)	($Ship initial state is $State)
		(now) ($Ship state is $State)

(set up $)	(exhaust) { *(ship $Ship) (reset $Ship) }

%% ----------------------------------------------------------------------

(test #turn-ship)
	(turn #test-ship to helm setting)
	(#test-ship heading 0)

(test #turn-ship-to-starboard)
	(set helm for #test-ship to 359)
	(#test-ship heading 315)
	(turn #test-ship to helm setting)
	(#test-ship heading 359)

(test #turn-ship-to-port)
	(set helm for #test-ship to 270)
	(turn #test-ship to helm setting)
	(#test-ship heading 270)

(test #turn-ship-about)
	(set helm for #test-ship to 135)
	(turn #test-ship to helm setting)
	(#test-ship heading 0)
	(turn #test-ship to helm setting)
	(#test-ship heading 45)
	(turn #test-ship to helm setting)
	(#test-ship heading 90)
	(turn #test-ship to helm setting)
	(#test-ship heading 135)
	(turn #test-ship to helm setting)
	(#test-ship heading 135)

(test #turn-ship-to-starboard-too-hard)
	(set helm for #test-ship to 45)
	(turn #test-ship to helm setting)
	(#test-ship heading 0)

(test #turn-ship-to-port-too-hard)
	(set helm for #test-ship to 225)
	(turn #test-ship to helm setting)
	(#test-ship heading 270)

(test #accelerate)
	(accelerate #test-ship to throttle setting)
	(#test-ship speed $Speed)
	$Speed
	(#test-ship warp gradient $Gradient)
	$Gradient
	(assert [700 7] = [$Speed $Gradient])

(test #accelerate-too-fast)
	(set throttle for #test-ship to gradient 9)
	(accelerate #test-ship to throttle setting)
	(#test-ship warp gradient 7)
	(accelerate #test-ship to throttle setting)
	(#test-ship warp gradient 9)

(test #accelerate-way-too-fast)
	(set throttle for #test-ship to gradient 10)
	(accelerate #test-ship to throttle setting)
	(#test-ship warp gradient 7)
	(accelerate #test-ship to throttle setting)
	(#test-ship warp gradient 9)

(test #decelerate)
	(set throttle for #test-ship to speed 0)
	(accelerate #test-ship to throttle setting)
	(#test-ship warp gradient 0)

(test #energy-for-warp-4)
	(#test-ship energy needed for distance 400 into 1)

(test #energy-for-warp-8)
	(#test-ship energy needed for distance 800 into $E)
	$E
	(assert $E = 6)

(assert moves to $SX $SY $X $Y $PX $PY)
	(move #test-ship on course and speed)
	(#test-ship coordinates into $SX $SY $X $Y $PX $PY)

(test #move-on-course)
	(assert moves to 3 4 2 3 6 6)

(test #move-on-course-closest-target)
	(turn #test-ship to face #closest-target)
	(assert moves to 3 4 8 3 6 10)

(test #move-on-course-distant-target)
	(turn #test-ship to face #distant-target)
	(assert moves to 3 4 4 9 2 10)

(assert energy $Energy yields throttle $Throttle)
	(932 minus $Energy into $Deficit)
	(decrease energy for #test-ship by $Deficit)
	(adjust #test-ship throttle for remaining energy)
	(#test-ship throttle setting $Throttle)

(test #adjust-throttle-932)
	(assert energy 932 yields throttle 700)

(test #adjust-throttle-6)
	(assert energy 6 yields throttle 700)

(test #adjust-throttle-1)
	(assert energy 1 yields throttle 500)

(test #adjust-throttle-0)
	(assert energy 0 yields throttle 0)

(assert $Target goes to $SX $SY $X $Y heading $H speed $S energy $E)
	(if) ($Target state is $Destination) (then)
		(set destination for #test-ship to $Destination)
	(endif)
	(update #test-ship)
	(#test-ship subsector into $SX $SY $X $Y)
	(#test-ship heading $H)
	(#test-ship speed $S)
	(#test-ship energy $E)

(test #update-ship-near-target)
	(assert #near-target goes to 3 4 2 3
	 heading 315 speed 700 energy 971)

(test #update-ship-far-target)
	(assert #far-target goes to 3 3 5 9
	 heading 0 speed 700 energy 968)

(test #update-ship-distant-target)
	(assert #distant-target goes to 2 4 8 6
	 heading 270 speed 700 energy 968)

(assert $N minutes goes to $SX $SY $X $Y $PX $PY at throttle $Throttle)
	(set throttle for #test-ship to gradient $Throttle)
	(move #test-ship for $N minutes)
	(#test-ship coordinates into $SX $SY $X $Y $PX $PY)

(test #move-1-at-7)
	(assert 1 minutes goes to 3 3 5 9 5 5 at throttle 7)

(test #move-2-at-7)
	(assert 2 minutes goes to 3 3 8 3 3 7 at throttle 7)

(test #move-5-at-7)
	(assert 5 minutes goes to 5 2 6 7 7 9 at throttle 7)

(test #move-10-at-4)
	(assert 10 minutes goes to 6 3 10 9 4 6 at throttle 4)

(assert $N minutes toward $Destination goes to $SX $SY $X $Y $PX $PY)
	(set destination for #test-ship to $Destination)
	(set throttle for #test-ship to gradient 4)
	(move #test-ship for $N minutes)
	(#test-ship coordinates into $SX $SY $X $Y $PX $PY)

(test #move-1-toward-corner)
	(assert 1 minutes toward [899 899] goes to 3 4 5 2 5 5)

(test #move-2-toward-corner)
	(assert 2 minutes toward [899 899] goes to 3 3 8 9 4 6)

(test #move-5-toward-corner)
	(assert 5 minutes toward [899 899] goes to 4 4 8 4 4 8)

