%% maneuvering.dg
%% Also include sectored-grid.dg when compiling or debugging.

%%-------------------------------- INTERFACES --------------------------------

(interface (update $<Ship))

(interface (move $<Ship for $<Ticks minutes))

(interface (move $<Ship randomly))

(interface (attract nearby ships to $<Object))

%%------------------------------ IMPLEMENTATION ------------------------------

(turn $Ship to helm setting)
	($Ship effective turn mode $Mode)
	($Ship helm setting $Helm)
	(turn $Ship $Mode toward heading $Helm)

(accelerate $Ship to throttle setting)
	($Ship speed $Speed)
	($Ship throttle setting $Throttle)
	(if) ($Speed < $Throttle) (then)
		($Ship acceleration $Acceleration)
		($Speed plus $Acceleration into $MaxSpeed)
		(if) ($MaxSpeed > $Throttle) (then)
			($NewSpeed = $Throttle)
		(else)
			($NewSpeed = $MaxSpeed)
		(endif)
	(else)
		($NewSpeed = $Throttle)
	(endif)
	(accelerate $Ship to speed $NewSpeed) 

(move $Ship on course and speed)
	($Ship state is $State)
	($Ship destination $Destination)
	(calculate range from $State to $Destination into $Range)
	($Ship speed $Distance)
	(bearing from $Ship to position $Destination into $Bearing)
	($Ship heading $Heading)
	(if) ($Range > $Distance) (or) ~($Bearing = $Heading) (then)
		(move $Ship $Distance forward)
		($Travelled = $Distance)
	(else)
		(drag $Ship to position $Destination) %% already oriented
		($Travelled = $Range)
		(set throttle for $Ship to speed 0)
	(endif)
	($Ship energy needed for distance $Travelled into $Energy)
	(decrease energy for $Ship by $Energy)

($Ship energy needed for distance $Distance into $Result)
	($Ship drive efficiency $Efficiency)
	($Distance divided by $Efficiency into $Dividend)
	($Distance modulo $Efficiency into $Remainder)
	(if) ($Remainder > 0) (then)
		($Dividend plus 1 into $Energy)
	(else)
		($Dividend = $Energy)
	(endif)
	($Distance divided by 100 into $Gradient)
	($Ship cruising speed $Cruising)
	(if) ($Gradient > $Cruising) (then)
		($Gradient minus $Cruising into $Difference)
		($Difference plus 1 into $Multiplier)
		($Energy times $Multiplier into $Result)
	(else)
		($Result = $Energy)
	(endif)

(adjust $Ship throttle for remaining energy)
	($Ship throttle setting $Distance)
	($Ship energy needed for distance $Distance into $Needed)
	($Ship energy $Energy)
	(if) ($Energy < $Needed) (then)
		($Ship drive efficiency $Efficiency)
		($Energy times $Efficiency into $Throttle)
		(set throttle for $Ship to speed $Throttle)
	(endif)

(update $Ship)
	(turn $Ship to helm setting)
	(accelerate $Ship to throttle setting)
	(move $Ship on course and speed)
	(regenerate energy for $Ship)
	(adjust $Ship throttle for remaining energy)

(move $Ship for $Ticks minutes)
	(if) ($Ticks > 0) (then)
		(update $Ship)
		($Ticks minus 1 into $Remaining)
		(move $Ship for $Remaining minutes)
	(endif)

(move $Ship randomly)
	($Ship subsector into $SX $SY $ $)
	(random from 1 to 10 into $X)
	(random from 1 to 10 into $Y)
	(random from 1 to 10 into $PX)
	(random from 1 to 10 into $PY)
	(set destination for $Ship to $SX $SY $X $Y $PX $PY)
	($Ship cruising speed $Max)
	(random from 1 to $Max into $Throttle)
	(set throttle for $Ship to gradient $Throttle)

(attract nearby ships to $Object)
	($Object subsector into $SX $SY $X $Y)
	(exhaust) {
		*(ship $Ship)
		($Ship subsector into $SX $SY $X $Y)
		(drag $Ship 12 toward $Object)
	}
	
	